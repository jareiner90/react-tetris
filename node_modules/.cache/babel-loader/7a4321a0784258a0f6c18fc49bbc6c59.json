{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { createStage } from '../gameHelpers';\nexport const useStage = (player, resetPlayer) => {\n  const [stage, setStage] = useState(createStage());\n  useEffect(() => {\n    const updateStage = prevStage => {\n      const newStage = prevStage.map(row => {\n        row.map(cell => cell[1] === 'clear' ? [0, 'clear'] : cell);\n      });\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newStage[y + player];\n          }\n        });\n      });\n    };\n\n    setStage(prev => updateStage(prev));\n  }, []);\n  return [stage, setStage];\n};","map":{"version":3,"sources":["/Users/johnreiner/Development/jsGames/tetris_in_react/src/hooks/useStage.js"],"names":["useState","useEffect","createStage","useStage","player","resetPlayer","stage","setStage","updateStage","prevStage","newStage","map","row","cell","tetromino","forEach","y","value","x","prev"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,gBAA5B;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,MAAD,EAASC,WAAT,KAAyB;AAC7C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAACE,WAAW,EAAZ,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMO,WAAW,GAAGC,SAAS,IAAI;AAC7B,YAAMC,QAAQ,GAAGD,SAAS,CAACE,GAAV,CAAcC,GAAG,IAAI;AAClCA,QAAAA,GAAG,CAACD,GAAJ,CAAQE,IAAI,IAAKA,IAAI,CAAC,CAAD,CAAJ,KAAY,OAAZ,GAAsB,CAAC,CAAD,EAAI,OAAJ,CAAtB,GAAqCA,IAAtD;AACH,OAFgB,CAAjB;AAIAT,MAAAA,MAAM,CAACU,SAAP,CAAiBC,OAAjB,CAAyB,CAACH,GAAD,EAAKI,CAAL,KAAW;AAChCJ,QAAAA,GAAG,CAACG,OAAJ,CAAY,CAACE,KAAD,EAAOC,CAAP,KAAa;AACrB,cAAID,KAAK,KAAK,CAAd,EAAkB;AACdP,YAAAA,QAAQ,CAACM,CAAC,GAAGZ,MAAL,CAAR;AACH;AACJ,SAJD;AAKH,OAND;AAOH,KAZD;;AAcAG,IAAAA,QAAQ,CAACY,IAAI,IAAIX,WAAW,CAACW,IAAD,CAApB,CAAR;AAEH,GAjBQ,EAiBN,EAjBM,CAAT;AAmBA,SAAO,CAACb,KAAD,EAAQC,QAAR,CAAP;AAEH,CAxBM","sourcesContent":["import { useState, useEffect } from 'react';\nimport { createStage } from '../gameHelpers';\n\nexport const useStage = (player, resetPlayer) => {\n    const [stage, setStage] = useState(createStage());\n\n    useEffect(() => {\n        const updateStage = prevStage => {\n            const newStage = prevStage.map(row => {\n                row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell))\n            });\n\n            player.tetromino.forEach((row,y) => {\n                row.forEach((value,x) => {\n                    if (value !== 0 ) {\n                        newStage[y + player]\n                    }\n                })\n            })\n        }\n\n        setStage(prev => updateStage(prev))\n\n    }, [])\n\n    return [stage, setStage];\n\n}"]},"metadata":{},"sourceType":"module"}