{"ast":null,"code":"import { useState, useCallback } from 'react';\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\nimport { STAGE_WIDTH } from '../gameHelpers';\nexport const usePlayer = () => {\n  const [player, setPlayer] = useState({\n    pos: {\n      x: 0,\n      y: 0\n    },\n    tetromino: TETROMINOS[0].shape,\n    collided: false\n  });\n\n  const rotate = (matrix, dir) => {\n    // make rows into cols \n    const rotatedTetro = matrix.map((_, index) => matrix.map);\n  };\n\n  const playerRotate = (stage, dir) => {};\n\n  const updatePlayerPos = ({\n    x,\n    y,\n    collided\n  }) => {\n    setPlayer(prev => ({ ...prev,\n      pos: {\n        x: prev.pos.x += x,\n        y: prev.pos.y += y\n      },\n      collided\n    }));\n  };\n\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      pos: {\n        x: STAGE_WIDTH / 2 - 2,\n        y: 0\n      },\n      tetromino: randomTetromino().shape,\n      collided: false\n    });\n  }, []);\n  return [player, updatePlayerPos, resetPlayer];\n};","map":{"version":3,"sources":["/Users/johnreiner/Development/jsGames/tetris_in_react/src/hooks/usePlayer.js"],"names":["useState","useCallback","TETROMINOS","randomTetromino","STAGE_WIDTH","usePlayer","player","setPlayer","pos","x","y","tetromino","shape","collided","rotate","matrix","dir","rotatedTetro","map","_","index","playerRotate","stage","updatePlayerPos","prev","resetPlayer"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AAEA,SAASC,UAAT,EAAqBC,eAArB,QAA4C,eAA5C;AACA,SAASC,WAAT,QAA4B,gBAA5B;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAC7B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC;AACnCQ,IAAAA,GAAG,EAAE;AAAEC,MAAAA,CAAC,EAAE,CAAL;AAAQC,MAAAA,CAAC,EAAE;AAAX,KAD8B;AAEnCC,IAAAA,SAAS,EAAET,UAAU,CAAC,CAAD,CAAV,CAAcU,KAFU;AAGnCC,IAAAA,QAAQ,EAAE;AAHyB,GAAD,CAApC;;AAMA,QAAMC,MAAM,GAAG,CAACC,MAAD,EAASC,GAAT,KAAiB;AAC9B;AAEA,UAAMC,YAAY,GAAGF,MAAM,CAACG,GAAP,CAAW,CAACC,CAAD,EAAIC,KAAJ,KAAcL,MAAM,CAACG,GAAhC,CAArB;AACD,GAJD;;AAMA,QAAMG,YAAY,GAAG,CAACC,KAAD,EAAQN,GAAR,KAAgB,CAEpC,CAFD;;AAIA,QAAMO,eAAe,GAAG,CAAC;AAAEd,IAAAA,CAAF;AAAKC,IAAAA,CAAL;AAAQG,IAAAA;AAAR,GAAD,KAAwB;AAC9CN,IAAAA,SAAS,CAACiB,IAAI,KAAK,EACjB,GAAGA,IADc;AAEjBhB,MAAAA,GAAG,EAAE;AAAEC,QAAAA,CAAC,EAAGe,IAAI,CAAChB,GAAL,CAASC,CAAT,IAAcA,CAApB;AAAwBC,QAAAA,CAAC,EAAGc,IAAI,CAAChB,GAAL,CAASE,CAAT,IAAcA;AAA1C,OAFY;AAGjBG,MAAAA;AAHiB,KAAL,CAAL,CAAT;AAKD,GAND;;AAQA,QAAMY,WAAW,GAAGxB,WAAW,CAAC,MAAM;AACpCM,IAAAA,SAAS,CAAC;AACRC,MAAAA,GAAG,EAAE;AAAEC,QAAAA,CAAC,EAAEL,WAAW,GAAG,CAAd,GAAkB,CAAvB;AAA0BM,QAAAA,CAAC,EAAE;AAA7B,OADG;AAERC,MAAAA,SAAS,EAAER,eAAe,GAAGS,KAFrB;AAGRC,MAAAA,QAAQ,EAAE;AAHF,KAAD,CAAT;AAKD,GAN8B,EAM5B,EAN4B,CAA/B;AAQA,SAAO,CAACP,MAAD,EAASiB,eAAT,EAA0BE,WAA1B,CAAP;AACD,CAlCM","sourcesContent":["import { useState, useCallback } from 'react';\n\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\nimport { STAGE_WIDTH } from '../gameHelpers';\n\nexport const usePlayer = () => {\n  const [player, setPlayer] = useState({\n    pos: { x: 0, y: 0 },\n    tetromino: TETROMINOS[0].shape,\n    collided: false,\n  });\n\n  const rotate = (matrix, dir) => {\n    // make rows into cols \n\n    const rotatedTetro = matrix.map((_, index) => matrix.map )\n  }\n\n  const playerRotate = (stage, dir) => {\n\n  }\n\n  const updatePlayerPos = ({ x, y, collided }) => {\n    setPlayer(prev => ({\n      ...prev,\n      pos: { x: (prev.pos.x += x), y: (prev.pos.y += y)},\n      collided,\n    }))\n  }\n\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\n      tetromino: randomTetromino().shape,\n      collided: false,\n    })\n  }, [])\n\n  return [player, updatePlayerPos, resetPlayer];\n}"]},"metadata":{},"sourceType":"module"}