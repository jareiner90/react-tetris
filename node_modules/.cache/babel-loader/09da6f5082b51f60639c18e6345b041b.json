{"ast":null,"code":"export const STAGE_WIDTH = 12;\nexport const STAGE_HEIGHT = 20;\nexport const createStage = () => Array.from(Array(STAGE_HEIGHT), () => new Array(STAGE_WIDTH).fill([0, 'clear']));\nexport const checkCollision = (player, stage, {\n  x: moveX,\n  y: moveY\n}) => {\n  for (let y = 0; y < player.tetromino.length; y += 1) {\n    for (let x = 0; x < player.tetromino[y].length; x += 1) {\n      // 1 check thats were on an actual tet cell \n      if (player.tetromino[y][x] !== 0) {\n        if ( // 2 check that our move is inside the game  (y)\n        // we shouldnt got through the bottom of the play area \n        !stage[y + player.pos.y + moveY] || // check that our move is inside the game areas (x)\n        !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] || // check that the cell were moving to isnt set to clear \n        stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !== 'clear') {\n          return true;\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/Users/johnreiner/Development/jsGames/tetris_in_react/src/gameHelpers.js"],"names":["STAGE_WIDTH","STAGE_HEIGHT","createStage","Array","from","fill","checkCollision","player","stage","x","moveX","y","moveY","tetromino","length","pos"],"mappings":"AAAA,OAAO,MAAMA,WAAW,GAAG,EAApB;AACP,OAAO,MAAMC,YAAY,GAAG,EAArB;AAEP,OAAO,MAAMC,WAAW,GAAG,MACvBC,KAAK,CAACC,IAAN,CAAWD,KAAK,CAACF,YAAD,CAAhB,EAAgC,MAC5B,IAAIE,KAAJ,CAAUH,WAAV,EAAuBK,IAAvB,CAA4B,CAAC,CAAD,EAAI,OAAJ,CAA5B,CADJ,CADG;AAMH,OAAO,MAAMC,cAAc,GAAG,CAACC,MAAD,EAASC,KAAT,EAAgB;AAAEC,EAAAA,CAAC,EAAEC,KAAL;AAAYC,EAAAA,CAAC,EAAEC;AAAf,CAAhB,KAA2C;AACrE,OAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAAM,CAACM,SAAP,CAAiBC,MAArC,EAA6CH,CAAC,IAAI,CAAlD,EAAqD;AACjD,SAAK,IAAIF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,MAAM,CAACM,SAAP,CAAiBF,CAAjB,EAAoBG,MAAxC,EAAgDL,CAAC,IAAI,CAArD,EAAwD;AACxD;AACA,UAAIF,MAAM,CAACM,SAAP,CAAiBF,CAAjB,EAAoBF,CAApB,MAA2B,CAA/B,EAAkC;AAC9B,aACF;AACA;AACM,SAACD,KAAK,CAACG,CAAC,GAAGJ,MAAM,CAACQ,GAAP,CAAWJ,CAAf,GAAmBC,KAApB,CAAN,IACN;AACM,SAACJ,KAAK,CAACG,CAAC,GAAGJ,MAAM,CAACQ,GAAP,CAAWJ,CAAf,GAAmBC,KAApB,CAAL,CAAgCH,CAAC,GAAGF,MAAM,CAACQ,GAAP,CAAWN,CAAf,GAAmBC,KAAnD,CAFD,IAGN;AACMF,QAAAA,KAAK,CAACG,CAAC,GAAGJ,MAAM,CAACQ,GAAP,CAAWJ,CAAf,GAAmBC,KAApB,CAAL,CAAgCH,CAAC,GAAGF,MAAM,CAACQ,GAAP,CAAWN,CAAf,GAAmBC,KAAnD,EAA0D,CAA1D,MAAiE,OAPrE,EAQM;AACE,iBAAO,IAAP;AACH;AACR;AACJ;AACA;AACJ,CAnBM","sourcesContent":["export const STAGE_WIDTH = 12\nexport const STAGE_HEIGHT = 20\n\nexport const createStage = () => \n    Array.from(Array(STAGE_HEIGHT), ()=> \n        new Array(STAGE_WIDTH).fill([0, 'clear'])\n    )\n\n\n    export const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\n        for (let y = 0; y < player.tetromino.length; y += 1) {\n            for (let x = 0; x < player.tetromino[y].length; x += 1) {\n            // 1 check thats were on an actual tet cell \n            if (player.tetromino[y][x] !== 0) {\n                if (\n              // 2 check that our move is inside the game  (y)\n              // we shouldnt got through the bottom of the play area \n                    !stage[y + player.pos.y + moveY] || \n              // check that our move is inside the game areas (x)\n                    !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] || \n              // check that the cell were moving to isnt set to clear \n                    stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !== 'clear'\n                    ) {\n                        return true;\n                    }\n            }\n        }\n        }\n    }"]},"metadata":{},"sourceType":"module"}