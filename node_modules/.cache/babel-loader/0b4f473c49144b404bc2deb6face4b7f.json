{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { createStage } from '../gameHelpers';\nexport const useStage = (player, resetPlayer) => {\n  const [stage, setStage] = useState(createStage());\n  const [rowsCleared, setRowsCleared] = useState(0);\n  useEffect(() => {\n    setRowsCleared(0);\n\n    const sweepRows = newStage => newStage.reduce((ack, row) => {\n      if (row.findIndex(cell => cell[0] === 0) === -1) {\n        setRowsCleared(prev => prev + 1);\n        ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n      }\n    });\n\n    const updateStage = prevStage => {\n      // First flush the stage\n      const newStage = prevStage.map(row => row.map(cell => cell[1] === 'clear' ? [0, 'clear'] : cell)); // Then draw the tetromino\n\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newStage[y + player.pos.y][x + player.pos.x] = [value, `${player.collided ? 'merged' : 'clear'}`];\n          }\n        });\n      }); // Then check if we collided\n\n      if (player.collided) {\n        resetPlayer();\n      }\n\n      return newStage;\n    };\n\n    setStage(prev => updateStage(prev));\n  }, [player, resetPlayer]);\n  return [stage, setStage];\n};","map":{"version":3,"sources":["/Users/johnreiner/Development/jsGames/tetris_in_react/src/hooks/useStage.js"],"names":["useState","useEffect","createStage","useStage","player","resetPlayer","stage","setStage","rowsCleared","setRowsCleared","sweepRows","newStage","reduce","ack","row","findIndex","cell","prev","unshift","Array","length","fill","updateStage","prevStage","map","tetromino","forEach","y","value","x","pos","collided"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,gBAA5B;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,MAAD,EAASC,WAAT,KAAyB;AAC/C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAACE,WAAW,EAAZ,CAAlC;AACA,QAAM,CAACM,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAC,CAAD,CAA9C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AAEdQ,IAAAA,cAAc,CAAC,CAAD,CAAd;;AAEA,UAAMC,SAAS,GAAGC,QAAQ,IACxBA,QAAQ,CAACC,MAAT,CAAgB,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC5B,UAAIA,GAAG,CAACC,SAAJ,CAAcC,IAAI,IAAIA,IAAI,CAAC,CAAD,CAAJ,KAAY,CAAlC,MAAyC,CAAC,CAA9C,EAAiD;AAC/CP,QAAAA,cAAc,CAACQ,IAAI,IAAIA,IAAI,GAAG,CAAhB,CAAd;AACAJ,QAAAA,GAAG,CAACK,OAAJ,CAAY,IAAIC,KAAJ,CAAUR,QAAQ,CAAC,CAAD,CAAR,CAAYS,MAAtB,EAA8BC,IAA9B,CAAmC,CAAC,CAAD,EAAI,OAAJ,CAAnC,CAAZ;AAED;AACF,KAND,CADF;;AASA,UAAMC,WAAW,GAAGC,SAAS,IAAI;AAC/B;AACA,YAAMZ,QAAQ,GAAGY,SAAS,CAACC,GAAV,CAAcV,GAAG,IAChCA,GAAG,CAACU,GAAJ,CAAQR,IAAI,IAAKA,IAAI,CAAC,CAAD,CAAJ,KAAY,OAAZ,GAAsB,CAAC,CAAD,EAAI,OAAJ,CAAtB,GAAqCA,IAAtD,CADe,CAAjB,CAF+B,CAM/B;;AACAZ,MAAAA,MAAM,CAACqB,SAAP,CAAiBC,OAAjB,CAAyB,CAACZ,GAAD,EAAMa,CAAN,KAAY;AACnCb,QAAAA,GAAG,CAACY,OAAJ,CAAY,CAACE,KAAD,EAAQC,CAAR,KAAc;AACxB,cAAID,KAAK,KAAK,CAAd,EAAiB;AACfjB,YAAAA,QAAQ,CAACgB,CAAC,GAAGvB,MAAM,CAAC0B,GAAP,CAAWH,CAAhB,CAAR,CAA2BE,CAAC,GAAGzB,MAAM,CAAC0B,GAAP,CAAWD,CAA1C,IAA+C,CAC7CD,KAD6C,EAE5C,GAAExB,MAAM,CAAC2B,QAAP,GAAkB,QAAlB,GAA6B,OAAQ,EAFK,CAA/C;AAID;AACF,SAPD;AAQD,OATD,EAP+B,CAiB/B;;AACA,UAAI3B,MAAM,CAAC2B,QAAX,EAAqB;AACnB1B,QAAAA,WAAW;AACZ;;AAED,aAAOM,QAAP;AACD,KAvBD;;AAyBAJ,IAAAA,QAAQ,CAACU,IAAI,IAAIK,WAAW,CAACL,IAAD,CAApB,CAAR;AACD,GAvCQ,EAuCN,CAACb,MAAD,EAASC,WAAT,CAvCM,CAAT;AAyCA,SAAO,CAACC,KAAD,EAAQC,QAAR,CAAP;AACD,CA9CM","sourcesContent":["import { useState, useEffect } from 'react';\nimport { createStage } from '../gameHelpers';\n\nexport const useStage = (player, resetPlayer) => {\n  const [stage, setStage] = useState(createStage());\n  const [rowsCleared, setRowsCleared] = useState(0);\n\n  useEffect(() => {\n\n    setRowsCleared(0);\n\n    const sweepRows = newStage => \n      newStage.reduce((ack, row) => {\n        if (row.findIndex(cell => cell[0] === 0) === -1) {\n          setRowsCleared(prev => prev + 1);\n          ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n          \n        }\n      })\n\n    const updateStage = prevStage => {\n      // First flush the stage\n      const newStage = prevStage.map(row =>\n        row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell)),\n      );\n\n      // Then draw the tetromino\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newStage[y + player.pos.y][x + player.pos.x] = [\n              value,\n              `${player.collided ? 'merged' : 'clear'}`,\n            ];\n          }\n        });\n      });\n      // Then check if we collided\n      if (player.collided) {\n        resetPlayer();\n      }\n\n      return newStage;\n    };\n\n    setStage(prev => updateStage(prev));\n  }, [player, resetPlayer]);\n\n  return [stage, setStage];\n};\n"]},"metadata":{},"sourceType":"module"}