{"ast":null,"code":"var _jsxFileName = \"/Users/johnreiner/Development/jsGames/tetris_in_react/src/components/Tetris.js\";\nimport React, { useState } from 'react';\nimport { createStage, checkCollision } from '../gameHelpers'; // Styled Components\n\nimport { StyledTetrisWrapper, StyledTetris } from './Styles/StyledTetris'; // Custom Hooks\n\nimport { useInterval } from '../hooks/useInterval';\nimport { usePlayer } from '../hooks/usePlayer';\nimport { useStage } from '../hooks/useStage';\nimport { useGameStatus } from '../hooks/useGameStatus'; // Components\n\nimport Stage from './Stage';\nimport Display from './Display';\nimport StartButton from './StartButton';\nimport NavBar from './NavBar';\n\nconst Tetris = () => {\n  const [dropTime, setDropTime] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n  const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\n  const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\n  const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(rowsCleared);\n\n  const movePlayer = dir => {\n    if (!checkCollision(player, stage, {\n      x: dir,\n      y: 0\n    })) {\n      updatePlayerPos({\n        x: dir,\n        y: 0\n      });\n    }\n  };\n\n  const startGame = () => {\n    // Reset everything\n    setStage(createStage());\n    setDropTime(1000);\n    resetPlayer();\n    setGameOver(false);\n    setScore(0);\n    setRows(0);\n    setLevel(0);\n  };\n\n  const drop = () => {\n    if (rows > (level + 1) * 10) {\n      setLevel(prev => prev + 1);\n      setDropTime(1000 / (level + 1) + 200);\n      console.log('level up!');\n    }\n\n    if (!checkCollision(player, stage, {\n      x: 0,\n      y: 1\n    })) {\n      updatePlayerPos({\n        x: 0,\n        y: 1,\n        collided: false\n      });\n    } else {\n      // Game Over\n      if (player.pos.y < 1) {\n        setGameOver(true);\n        setDropTime(null);\n        fetchScoreLevel(level);\n      }\n\n      updatePlayerPos({\n        x: 0,\n        y: 0,\n        collided: true\n      });\n    }\n  };\n\n  const keyUp = ({\n    keyCode\n  }) => {\n    if (!gameOver) {\n      if (keyCode === 40) {\n        setDropTime(1000 / (level + 1) + 200);\n      }\n    }\n  };\n\n  const dropPlayer = () => {\n    setDropTime(null);\n    drop();\n  };\n\n  const move = ({\n    keyCode\n  }) => {\n    if (!gameOver) {\n      if (keyCode === 37) {\n        movePlayer(-1);\n      } else if (keyCode === 39) {\n        movePlayer(1);\n      } else if (keyCode === 40) {\n        dropPlayer();\n      } else if (keyCode === 38) {\n        playerRotate(stage, 1);\n      }\n    }\n  };\n\n  useInterval(() => {\n    drop();\n  }, dropTime);\n\n  const fetchScoreLevel = level => {\n    fetch('http://localhost:3000/levels', {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        number: level\n      })\n    });\n    fetch('http:');\n  };\n\n  return /*#__PURE__*/React.createElement(StyledTetrisWrapper, {\n    role: \"button\",\n    tabIndex: \"0\",\n    onKeyDown: e => move(e),\n    onKeyUp: keyUp,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(NavBar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(StyledTetris, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Stage, {\n    stage: stage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"aside\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, gameOver ? /*#__PURE__*/React.createElement(Display, {\n    gameOver: gameOver,\n    text: \"Game Over\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Display, {\n    text: `Score: ${score}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Display, {\n    text: `Rows: ${rows}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Display, {\n    text: `Level: ${level}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(StartButton, {\n    callback: startGame,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }\n  }))));\n};\n\nexport default Tetris;","map":{"version":3,"sources":["/Users/johnreiner/Development/jsGames/tetris_in_react/src/components/Tetris.js"],"names":["React","useState","createStage","checkCollision","StyledTetrisWrapper","StyledTetris","useInterval","usePlayer","useStage","useGameStatus","Stage","Display","StartButton","NavBar","Tetris","dropTime","setDropTime","gameOver","setGameOver","player","updatePlayerPos","resetPlayer","playerRotate","stage","setStage","rowsCleared","score","setScore","rows","setRows","level","setLevel","movePlayer","dir","x","y","startGame","drop","prev","console","log","collided","pos","fetchScoreLevel","keyUp","keyCode","dropPlayer","move","fetch","method","headers","body","JSON","stringify","number","e"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\n\nimport { createStage, checkCollision } from '../gameHelpers';\n\n// Styled Components\nimport { StyledTetrisWrapper, StyledTetris } from './Styles/StyledTetris';\n\n// Custom Hooks\nimport { useInterval } from '../hooks/useInterval'\nimport { usePlayer } from '../hooks/usePlayer';\nimport { useStage } from '../hooks/useStage';\nimport { useGameStatus } from '../hooks/useGameStatus';\n\n// Components\nimport Stage from './Stage';\nimport Display from './Display';\nimport StartButton from './StartButton';\nimport NavBar from './NavBar'\n\nconst Tetris = () => {\n    const [dropTime, setDropTime] = useState(null);\n    const [gameOver, setGameOver] = useState(false);\n\n    const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\n    const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\n    const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(\n        rowsCleared\n    );\n\n    const movePlayer = dir => {\n        if (!checkCollision(player, stage, { x: dir, y: 0 })) {\n            updatePlayerPos({ x: dir, y: 0 });\n        }\n    }\n\n    const startGame = () => {\n    // Reset everything\n    setStage(createStage());\n    setDropTime(1000);\n    resetPlayer();\n    setGameOver(false);\n    setScore(0);\n    setRows(0)\n    setLevel(0)\n    }\n\n    const drop = () => {\n\n        if (rows > (level + 1) * 10) {\n            setLevel(prev => prev + 1);\n            setDropTime(1000 / (level + 1) + 200)\n            console.log('level up!')\n        }\n        if (!checkCollision(player, stage, { x: 0, y: 1 })) {\n            updatePlayerPos({ x: 0, y: 1, collided: false })\n        } else {\n        // Game Over\n            if (player.pos.y < 1) {\n            setGameOver(true);\n            setDropTime(null);\n            fetchScoreLevel(level)\n            }\n            updatePlayerPos({ x: 0, y: 0, collided: true });\n        }\n    }\n\n    const keyUp = ({ keyCode }) => {\n        if (!gameOver) {\n            if (keyCode === 40) {\n                setDropTime(1000 / (level + 1) + 200);\n            }\n        }\n    }\n\n    const dropPlayer = () => {\n    setDropTime(null)\n    drop();\n    }\n\n    const move = ({ keyCode }) => {\n    if (!gameOver) {\n        if (keyCode === 37) {\n            movePlayer(-1);\n        } else if (keyCode === 39) {\n            movePlayer(1);\n        } else if (keyCode === 40) {\n            dropPlayer();\n        } else if (keyCode === 38) {\n            playerRotate(stage, 1);\n        }\n    }\n    }\n\n    useInterval(() => {\n        drop();\n    }, dropTime)\n\n    const fetchScoreLevel = level => {\n        fetch('http://localhost:3000/levels', {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({number: level})\n            \n        })\n        fetch('http:')\n    }\n\n\n    return (\n        \n    <StyledTetrisWrapper role=\"button\" tabIndex=\"0\" onKeyDown={e => move(e)} onKeyUp={keyUp}>\n        <NavBar />\n        <StyledTetris>\n        \n        <Stage stage={stage} />\n        <aside>\n            {gameOver ? (\n            <Display gameOver={gameOver} text=\"Game Over\" />\n            ) : (\n            <div>\n                <Display text={`Score: ${score}`} />\n                <Display text={`Rows: ${rows}`} />\n                <Display text={`Level: ${level}`} />\n            </div>\n            )}\n            <StartButton callback={startGame} />\n        </aside>\n        </StyledTetris>\n    </StyledTetrisWrapper>\n    );\n};\n\nexport default Tetris;\n"]},"metadata":{},"sourceType":"module"}